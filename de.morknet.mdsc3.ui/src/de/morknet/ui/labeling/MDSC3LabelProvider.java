/*
 * generated by Xtext
 */
package de.morknet.ui.labeling;

import com.google.inject.Inject;

import de.morknet.mdsc3.APC;
import de.morknet.mdsc3.Controller;
import de.morknet.mdsc3.DHCP;
import de.morknet.mdsc3.DNS;
import de.morknet.mdsc3.Drive;
import de.morknet.mdsc3.Host;
import de.morknet.mdsc3.HostService;
import de.morknet.mdsc3.JK;
import de.morknet.mdsc3.JkServer;
import de.morknet.mdsc3.LDAP;
import de.morknet.mdsc3.Network;
import de.morknet.mdsc3.PamLDAP;
import de.morknet.mdsc3.Postfix;
import de.morknet.mdsc3.SSH;
import de.morknet.mdsc3.Samba;
import de.morknet.mdsc3.Volume;
import de.morknet.mdsc3.WordPress;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
public class MDSC3LabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	public MDSC3LabelProvider(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(Host host)
	{
		String result = host.getName();
		if (host.isDeploy())
		{
			result.concat(" (deploy)");
		}
		return result;
	}

	String text(Network network)
	{
		return network.getName() + " " + network.getAddress() + "/" + network.getBits();
	}

	String text (Controller ctrl)
	{
		return ctrl.eClass().getName();
	}

	String text (Drive drive)
	{
		return "drive " + drive.getDevice() + " " + drive.getChannel();
	}

	String text(Volume volume)
	{
		return "volume " + (volume.isSpare() ? "(spare)" : (volume.getDevice() + " (" + volume.getType().getLiteral() + ")"));
	}

	String text(HostService service)
	{
		return service.eClass().getName();
	}

	String text(APC apc)
	{
		return "APC (" +
			(apc.getName() != null ? apc.getName() : "")+
			(apc.getHost() != null ? apc.getHost().getName() : "") + ")";
	}

	String text(DHCP dhcp)
	{
		return "DHCP " + (dhcp.isMaster() ? "master" : "slave");
	}

	String text(DNS dns)
	{
		return "DNS";
	}
	
	String text(JK jk)
	{
		JkServer jkServer = jk.getServer().get(0);

		return "Mod JK " + jkServer.getHost().getName() + ":" + jkServer.getPort() + jk.getMountpoint();
	}
	
	String text(WordPress wp)
	{
		return "WordPress" + (wp.isMu() ? " MU" : "") + " (" + wp.getPath() + ")"; 
	}

	String text(LDAP ldap)
	{
		return "LDAP " + (ldap.isMaster() ? "master" : "slave");
	}

	String text(PamLDAP pam)
	{
		return pam.isSecure() ? "PAM LDAP (secure)" : "PAM LDAP";
	}

	String text(Postfix postfix)
	{
		return "Postfix (" + postfix.getRelay().getName() + ")";
	}

	String text(Samba samba)
	{
		String netbiosname = samba.getNetbiosname();
		if (netbiosname == null)
		{
			Host host = (Host)samba.eContainer();
			netbiosname = host.getName();
		}
		return "Samba (" + netbiosname + ") " + samba.getMode().getLiteral();
	}

	String text(SSH ssh)
	{
		return ssh.getPort() == 22 ? "SSH" : "SSH (Port: " + ssh.getPort() + ")";
	}
}
